"""
script to determine git subcommands and gnerate a header file containing the constExpr strings and store the current git version.
"""

import subprocess
import os



def get_git_info():
    # Determine the git version
    version_output = subprocess.run( "git --version" , capture_output=True, shell=True, text=True).stdout
    GIT_VERSION = version_output.split(" ")[-1].strip()

    #Fetch list of commands and parse that 
    git_subcommand_output  = subprocess.run("git --list-cmds=main", capture_output=True, shell=True, text=True).stdout

    return (GIT_VERSION, list(filter(lambda s: len(s) > 0, git_subcommand_output.split(os.linesep))),)

def generate_list_as_string(data): 
    return ''.join(f'{chr(9)}"{element}",{os.linesep}' for element in data)


def generate_header_content(GIT_VERSION, SUBCOMMANDS):
    """
    Generate a C++ header file 
    """

    quote_needed_flags = [
    "-m",         # message (commit, tag, merge, cherry-pick, revert)
    "--message",
    "-F",         # file (commit, tag)
    "--file",
    "--author",   # author (commit)
    "--date",     # date (commit)
    "--grep",     # grep pattern (log)
    "--committer",# committer (log)
    "--since",    # since (log)
    "--until",    # until (log)
    "--repo",     # repo (push)
    "--receive-pack", # receive-pack (push)
    ]

    header_content = f"""\
    // AUTO-GENERATED BY THE UPDATER. DO NOT EDIT 
    // GIT VERSION AT THE TIME OF GENERATION: "{GIT_VERSION}"

    #pragma once
    #include <string>
    #include <array>

    const std::string git_version{{"{GIT_VERSION}"}};

    // All sub comands for git version {GIT_VERSION}
    constexpr std::array<std::string_view, {len(SUBCOMMANDS)}> commands = {{{generate_list_as_string(SUBCOMMANDS)}
        }};
    
    // Some common flags that need quotes
    constexpr std::array<std::string_view, {len(quote_needed_flags)}> flags_with_quotes =  {{{generate_list_as_string(quote_needed_flags)}
        }}; 
    
    """

    return header_content


def write_to_file(header_content):
    file = os.path.join("include/", "commands_list.h")

    with open(file, 'w+', encoding="utf-8") as f:
        f.write(header_content)
        f.close()



if __name__ == "__main__":
    GIT_VERSION, SUBCOMMANDS = get_git_info()

    write_to_file(generate_header_content(GIT_VERSION, SUBCOMMANDS))


